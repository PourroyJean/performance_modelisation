/* 
 * Command line: opannotate --source --assembly multiply_debug 
 * 
 * Interpretation of command line:
 * Output annotated assembly listing with samples
 * 
 * CPU: Intel Broadwell microarchitecture, speed 2397.27 MHz (estimated)
 * Counted CPU_CLK_UNHALTED events (Clock cycles when not halted) with a unit mask of 0x00 (No unit mask) count 10000000
 * Counted INST_RETIRED events (number of instructions retired) with a unit mask of 0x00 (No unit mask) count 10000000
 */
                               :
                               :/nfs/pourroy/code/THESE/performance_modelisation/src/tool_oprofile/multiply_debug:     file format elf64-x86-64
                               :
                               :
                               :Disassembly of section .text:
                               :
0000000000400732 <_Z11mult_simplePdS_S_>: /* mult_simple(double*, double*, double*) total:    772 54.7906  2301 49.9674 */
                               :    res += C(i, 0);
                               :  }
                               :  return res;
                               :}
                               :
                               :void mult_simple(double *a, double *b, double *c) {
                               :  400732:	push   %rbp
                               :  400733:	mov    %rsp,%rbp
                               :  400736:	sub    $0x30,%rsp
                               :  40073a:	mov    %rdi,-0x18(%rbp)
                               :  40073e:	mov    %rsi,-0x20(%rbp)
                               :  400742:	mov    %rdx,-0x28(%rbp)
                               :
                               :  memset(c, 0, sizeof(c[0]) * N * N);
                               :  400746:	mov    0x201904(%rip),%eax        # 602050 <__TMC_END__>
                               :  40074c:	cltq   
                               :  40074e:	lea    0x0(,%rax,8),%rdx
                               :  400756:	mov    0x2018f4(%rip),%eax        # 602050 <__TMC_END__>
                               :  40075c:	cltq   
                               :  40075e:	imul   %rax,%rdx
                               :  400762:	mov    -0x28(%rbp),%rax
                               :  400766:	mov    $0x0,%esi
                               :  40076b:	mov    %rax,%rdi
                               :  40076e:	callq  400590 <memset@plt>
                               :  int i, j, k;
                               :  for (i = 0; i < N; ++i) {
                               :  400773:	movl   $0x0,-0x4(%rbp)
                               :  40077a:	jmpq   400861 <_Z11mult_simplePdS_S_+0x12f>
                               :    for (j = 0; j < N; ++j) {
                               :  40077f:	movl   $0x0,-0x8(%rbp)
                               :  400786:	jmpq   40084e <_Z11mult_simplePdS_S_+0x11c>
                               :      for (k = 0; k < M; ++k) {
                               :  40078b:	movl   $0x0,-0xc(%rbp)
                               :  400792:	jmpq   40083b <_Z11mult_simplePdS_S_+0x109>
                               :	C(i, j) += A(i, k) * B(k, j);
    35  2.4840   118  2.5624   :  400797:	mov    0x2018b3(%rip),%eax        # 602050 <__TMC_END__>
                               :  40079d:	imul   -0x4(%rbp),%eax
    15  1.0646    45  0.9772   :  4007a1:	mov    %eax,%edx
     1  0.0710     0       0   :  4007a3:	mov    -0x8(%rbp),%eax
    32  2.2711   113  2.4539   :  4007a6:	add    %edx,%eax
                               :  4007a8:	cltq   
     6  0.4258    19  0.4126   :  4007aa:	lea    0x0(,%rax,8),%rdx
                               :  4007b2:	mov    -0x28(%rbp),%rax
    42  2.9808   104  2.2584   :  4007b6:	add    %rax,%rdx
                               :  4007b9:	mov    0x201891(%rip),%eax        # 602050 <__TMC_END__>
     8  0.5678    30  0.6515   :  4007bf:	imul   -0x4(%rbp),%eax
     1  0.0710     0       0   :  4007c3:	mov    %eax,%ecx
    37  2.6260   126  2.7362   :  4007c5:	mov    -0x8(%rbp),%eax
                               :  4007c8:	add    %ecx,%eax
    14  0.9936    24  0.5212   :  4007ca:	cltq   
                               :  4007cc:	lea    0x0(,%rax,8),%rcx
    40  2.8389    93  2.0195   :  4007d4:	mov    -0x28(%rbp),%rax
     1  0.0710     0       0   :  4007d8:	add    %rcx,%rax
    19  1.3485    24  0.5212   :  4007db:	movsd  (%rax),%xmm1
     3  0.2129     0       0   :  4007df:	mov    0x20186f(%rip),%eax        # 602054 <M>
    39  2.7679   112  2.4321   :  4007e5:	imul   -0x4(%rbp),%eax
     0       0     1  0.0217   :  4007e9:	mov    %eax,%ecx
    11  0.7807    12  0.2606   :  4007eb:	mov    -0xc(%rbp),%eax
     0       0     1  0.0217   :  4007ee:	add    %ecx,%eax
    45  3.1938   126  2.7362   :  4007f0:	cltq   
                               :  4007f2:	lea    0x0(,%rax,8),%rcx
    15  1.0646    26  0.5646   :  4007fa:	mov    -0x18(%rbp),%rax
     1  0.0710     2  0.0434   :  4007fe:	add    %rcx,%rax
    39  2.7679   118  2.5624   :  400801:	movsd  (%rax),%xmm2
     1  0.0710     4  0.0869   :  400805:	mov    0x201845(%rip),%eax        # 602050 <__TMC_END__>
    15  1.0646    45  0.9772   :  40080b:	imul   -0xc(%rbp),%eax
     1  0.0710     3  0.0651   :  40080f:	mov    %eax,%ecx
    41  2.9099   133  2.8882   :  400811:	mov    -0x8(%rbp),%eax
     0       0     1  0.0217   :  400814:	add    %ecx,%eax
    11  0.7807    59  1.2812   :  400816:	cltq   
     0       0     2  0.0434   :  400818:	lea    0x0(,%rax,8),%rcx
    34  2.4131   117  2.5407   :  400820:	mov    -0x20(%rbp),%rax
                               :  400824:	add    %rcx,%rax
    14  0.9936    58  1.2595   :  400827:	movsd  (%rax),%xmm0
    60  4.2583   166  3.6048   :  40082b:	mulsd  %xmm2,%xmm0
    75  5.3229   230  4.9946   :  40082f:	addsd  %xmm1,%xmm0
    61  4.3293   237  5.1466   :  400833:	movsd  %xmm0,(%rdx)
                               :
                               :  memset(c, 0, sizeof(c[0]) * N * N);
                               :  int i, j, k;
                               :  for (i = 0; i < N; ++i) {
                               :    for (j = 0; j < N; ++j) {
                               :      for (k = 0; k < M; ++k) {
    40  2.8389   116  2.5190   :  400837:	addl   $0x1,-0xc(%rbp)
    15  1.0646    35  0.7600   :  40083b:	mov    0x201813(%rip),%eax        # 602054 <M>
                               :  400841:	cmp    %eax,-0xc(%rbp)
                               :  400844:	jl     400797 <_Z11mult_simplePdS_S_+0x65>
                               :void mult_simple(double *a, double *b, double *c) {
                               :
                               :  memset(c, 0, sizeof(c[0]) * N * N);
                               :  int i, j, k;
                               :  for (i = 0; i < N; ++i) {
                               :    for (j = 0; j < N; ++j) {
     0       0     1  0.0217   :  40084a:	addl   $0x1,-0x8(%rbp)
                               :  40084e:	mov    0x2017fc(%rip),%eax        # 602050 <__TMC_END__>
                               :  400854:	cmp    %eax,-0x8(%rbp)
                               :  400857:	jl     40078b <_Z11mult_simplePdS_S_+0x59>
                               :
                               :void mult_simple(double *a, double *b, double *c) {
                               :
                               :  memset(c, 0, sizeof(c[0]) * N * N);
                               :  int i, j, k;
                               :  for (i = 0; i < N; ++i) {
                               :  40085d:	addl   $0x1,-0x4(%rbp)
                               :  400861:	mov    0x2017e9(%rip),%eax        # 602050 <__TMC_END__>
                               :  400867:	cmp    %eax,-0x4(%rbp)
                               :  40086a:	jl     40077f <_Z11mult_simplePdS_S_+0x4d>
                               :      for (k = 0; k < M; ++k) {
                               :	C(i, j) += A(i, k) * B(k, j);
                               :      }
                               :    }
                               :  }
                               :  return;
                               :  400870:	nop
                               :}
                               :  400871:	leaveq 
                               :  400872:	retq   
                               :
                               :/nfs/pourroy/code/THESE/performance_modelisation/src/tool_oprofile/multiply_debug:     file format elf64-x86-64
                               :
                               :
                               :Disassembly of section .text:
                               :
0000000000400873 <_Z8mult_KIJPdS_S_>: /* mult_KIJ(double*, double*, double*) total:    635 45.0674  2301 49.9674 */
                               :    }
                               :  }
                               :  return;
                               :}
                               :
                               :void mult_KIJ(double *a, double *b, double *c) {
                               :  400873:	push   %rbp
                               :  400874:	mov    %rsp,%rbp
                               :  400877:	sub    $0x30,%rsp
                               :  40087b:	mov    %rdi,-0x18(%rbp)
                               :  40087f:	mov    %rsi,-0x20(%rbp)
                               :  400883:	mov    %rdx,-0x28(%rbp)
                               :  memset(c, 0, sizeof(c[0]) * N * N);
                               :  400887:	mov    0x2017c3(%rip),%eax        # 602050 <__TMC_END__>
                               :  40088d:	cltq   
                               :  40088f:	lea    0x0(,%rax,8),%rdx
                               :  400897:	mov    0x2017b3(%rip),%eax        # 602050 <__TMC_END__>
                               :  40089d:	cltq   
                               :  40089f:	imul   %rax,%rdx
                               :  4008a3:	mov    -0x28(%rbp),%rax
                               :  4008a7:	mov    $0x0,%esi
                               :  4008ac:	mov    %rax,%rdi
                               :  4008af:	callq  400590 <memset@plt>
                               :  int i, j, k;
                               :  for (k = 0; k < M; ++k)
                               :  4008b4:	movl   $0x0,-0xc(%rbp)
                               :  4008bb:	jmpq   4009a2 <_Z8mult_KIJPdS_S_+0x12f>
                               :    for (i = 0; i < N; ++i) {
                               :  4008c0:	movl   $0x0,-0x4(%rbp)
                               :  4008c7:	jmpq   40098f <_Z8mult_KIJPdS_S_+0x11c>
                               :      for (j = 0; j < N; ++j) {
     0       0     1  0.0217   :  4008cc:	movl   $0x0,-0x8(%rbp)
                               :  4008d3:	jmpq   40097c <_Z8mult_KIJPdS_S_+0x109>
                               :        C(i, j) += A(i, k) * B(k, j);
    36  2.5550   146  3.1705   :  4008d8:	mov    0x201772(%rip),%eax        # 602050 <__TMC_END__>
     1  0.0710     2  0.0434   :  4008de:	imul   -0x4(%rbp),%eax
    19  1.3485    56  1.2161   :  4008e2:	mov    %eax,%edx
                               :  4008e4:	mov    -0x8(%rbp),%eax
    33  2.3421   140  3.0402   :  4008e7:	add    %edx,%eax
     0       0     1  0.0217   :  4008e9:	cltq   
    14  0.9936    44  0.9555   :  4008eb:	lea    0x0(,%rax,8),%rdx
                               :  4008f3:	mov    -0x28(%rbp),%rax
    39  2.7679   122  2.6493   :  4008f7:	add    %rax,%rdx
     1  0.0710     3  0.0651   :  4008fa:	mov    0x201750(%rip),%eax        # 602050 <__TMC_END__>
    15  1.0646    43  0.9338   :  400900:	imul   -0x4(%rbp),%eax
     0       0     1  0.0217   :  400904:	mov    %eax,%ecx
    44  3.1228   154  3.3442   :  400906:	mov    -0x8(%rbp),%eax
     1  0.0710     0       0   :  400909:	add    %ecx,%eax
    20  1.4194    52  1.1292   :  40090b:	cltq   
                               :  40090d:	lea    0x0(,%rax,8),%rcx
    26  1.8453   128  2.7796   :  400915:	mov    -0x28(%rbp),%rax
     0       0     1  0.0217   :  400919:	add    %rcx,%rax
    14  0.9936    46  0.9989   :  40091c:	movsd  (%rax),%xmm1
     1  0.0710    10  0.2172   :  400920:	mov    0x20172e(%rip),%eax        # 602054 <M>
    34  2.4131   107  2.3236   :  400926:	imul   -0x4(%rbp),%eax
     0       0     1  0.0217   :  40092a:	mov    %eax,%ecx
     7  0.4968    32  0.6949   :  40092c:	mov    -0xc(%rbp),%eax
     0       0     4  0.0869   :  40092f:	add    %ecx,%eax
    46  3.2647   110  2.3887   :  400931:	cltq   
     0       0     1  0.0217   :  400933:	lea    0x0(,%rax,8),%rcx
    10  0.7097    28  0.6080   :  40093b:	mov    -0x18(%rbp),%rax
     2  0.1419     3  0.0651   :  40093f:	add    %rcx,%rax
    28  1.9872   151  3.2790   :  400942:	movsd  (%rax),%xmm2
     3  0.2129     2  0.0434   :  400946:	mov    0x201704(%rip),%eax        # 602050 <__TMC_END__>
    17  1.2065    50  1.0858   :  40094c:	imul   -0xc(%rbp),%eax
     0       0     3  0.0651   :  400950:	mov    %eax,%ecx
    34  2.4131   134  2.9099   :  400952:	mov    -0x8(%rbp),%eax
     0       0     1  0.0217   :  400955:	add    %ecx,%eax
    12  0.8517    69  1.4984   :  400957:	cltq   
     1  0.0710     0       0   :  400959:	lea    0x0(,%rax,8),%rcx
    33  2.3421   128  2.7796   :  400961:	mov    -0x20(%rbp),%rax
     1  0.0710     1  0.0217   :  400965:	add    %rcx,%rax
    18  1.2775    50  1.0858   :  400968:	movsd  (%rax),%xmm0
     0       0     7  0.1520   :  40096c:	mulsd  %xmm2,%xmm0
    42  2.9808   164  3.5613   :  400970:	addsd  %xmm1,%xmm0
    24  1.7033   115  2.4973   :  400974:	movsd  %xmm0,(%rdx)
                               :void mult_KIJ(double *a, double *b, double *c) {
                               :  memset(c, 0, sizeof(c[0]) * N * N);
                               :  int i, j, k;
                               :  for (k = 0; k < M; ++k)
                               :    for (i = 0; i < N; ++i) {
                               :      for (j = 0; j < N; ++j) {
    42  2.9808   137  2.9750   :  400978:	addl   $0x1,-0x8(%rbp)
    16  1.1356    51  1.1075   :  40097c:	mov    0x2016ce(%rip),%eax        # 602050 <__TMC_END__>
                               :  400982:	cmp    %eax,-0x8(%rbp)
                               :  400985:	jl     4008d8 <_Z8mult_KIJPdS_S_+0x65>
                               :
                               :void mult_KIJ(double *a, double *b, double *c) {
                               :  memset(c, 0, sizeof(c[0]) * N * N);
                               :  int i, j, k;
                               :  for (k = 0; k < M; ++k)
                               :    for (i = 0; i < N; ++i) {
                               :  40098b:	addl   $0x1,-0x4(%rbp)
     1  0.0710     2  0.0434   :  40098f:	mov    0x2016bb(%rip),%eax        # 602050 <__TMC_END__>
                               :  400995:	cmp    %eax,-0x4(%rbp)
                               :  400998:	jl     4008cc <_Z8mult_KIJPdS_S_+0x59>
                               :}
                               :
                               :void mult_KIJ(double *a, double *b, double *c) {
                               :  memset(c, 0, sizeof(c[0]) * N * N);
                               :  int i, j, k;
                               :  for (k = 0; k < M; ++k)
                               :  40099e:	addl   $0x1,-0xc(%rbp)
                               :  4009a2:	mov    0x2016ac(%rip),%eax        # 602054 <M>
                               :  4009a8:	cmp    %eax,-0xc(%rbp)
                               :  4009ab:	jl     4008c0 <_Z8mult_KIJPdS_S_+0x4d>
                               :    for (i = 0; i < N; ++i) {
                               :      for (j = 0; j < N; ++j) {
                               :        C(i, j) += A(i, k) * B(k, j);
                               :      }
                               :    }
                               :  return;
                               :  4009b1:	nop
                               :}
                               :  4009b2:	leaveq 
                               :  4009b3:	retq   
                               :
                               :/nfs/pourroy/code/THESE/performance_modelisation/src/tool_oprofile/multiply_debug:     file format elf64-x86-64
                               :
                               :
                               :Disassembly of section .text:
                               :
00000000004009b4 <_Z8init_matPdii>: /* init_mat(double*, int, int) total:      2  0.1419     3  0.0651 */
                               :}
                               :
                               :
                               :
                               :
                               :void init_mat (double * a, int N, int M){
                               :  4009b4:	push   %rbp
                               :  4009b5:	mov    %rsp,%rbp
                               :  4009b8:	push   %rbx
                               :  4009b9:	sub    $0x28,%rsp
                               :  4009bd:	mov    %rdi,-0x28(%rbp)
                               :  4009c1:	mov    %esi,-0x2c(%rbp)
                               :  4009c4:	mov    %edx,-0x30(%rbp)
                               :  int i, j;
                               :  for (i = 0; i < N; i++) {
                               :  4009c7:	movl   $0x0,-0x14(%rbp)
                               :  4009ce:	jmp    400a34 <_Z8init_matPdii+0x80>
                               :    for (j = 0; j < M; j++) {
                               :  4009d0:	movl   $0x0,-0x18(%rbp)
                               :  4009d7:	jmp    400a28 <_Z8init_matPdii+0x74>
                               :      A(i, j) = rand() % 100;
                               :  4009d9:	mov    -0x14(%rbp),%eax
                               :  4009dc:	imul   -0x30(%rbp),%eax
                               :  4009e0:	mov    %eax,%edx
                               :  4009e2:	mov    -0x18(%rbp),%eax
                               :  4009e5:	add    %edx,%eax
                               :  4009e7:	cltq   
                               :  4009e9:	lea    0x0(,%rax,8),%rdx
                               :  4009f1:	mov    -0x28(%rbp),%rax
     1  0.0710     0       0   :  4009f5:	lea    (%rdx,%rax,1),%rbx
                               :  4009f9:	callq  4005d0 <rand@plt>
                               :  4009fe:	mov    %eax,%ecx
                               :  400a00:	mov    $0x51eb851f,%edx
                               :  400a05:	mov    %ecx,%eax
                               :  400a07:	imul   %edx
     0       0     1  0.0217   :  400a09:	sar    $0x5,%edx
                               :  400a0c:	mov    %ecx,%eax
     0       0     1  0.0217   :  400a0e:	sar    $0x1f,%eax
                               :  400a11:	sub    %eax,%edx
                               :  400a13:	mov    %edx,%eax
                               :  400a15:	imul   $0x64,%eax,%eax
     0       0     1  0.0217   :  400a18:	sub    %eax,%ecx
                               :  400a1a:	mov    %ecx,%eax
                               :  400a1c:	cvtsi2sd %eax,%xmm0
     1  0.0710     0       0   :  400a20:	movsd  %xmm0,(%rbx)
                               :
                               :
                               :void init_mat (double * a, int N, int M){
                               :  int i, j;
                               :  for (i = 0; i < N; i++) {
                               :    for (j = 0; j < M; j++) {
                               :  400a24:	addl   $0x1,-0x18(%rbp)
                               :  400a28:	mov    -0x18(%rbp),%eax
                               :  400a2b:	cmp    -0x30(%rbp),%eax
                               :  400a2e:	jl     4009d9 <_Z8init_matPdii+0x25>
                               :
                               :
                               :
                               :void init_mat (double * a, int N, int M){
                               :  int i, j;
                               :  for (i = 0; i < N; i++) {
                               :  400a30:	addl   $0x1,-0x14(%rbp)
                               :  400a34:	mov    -0x14(%rbp),%eax
                               :  400a37:	cmp    -0x2c(%rbp),%eax
                               :  400a3a:	jl     4009d0 <_Z8init_matPdii+0x1c>
                               :    for (j = 0; j < M; j++) {
                               :      A(i, j) = rand() % 100;
                               :    }
                               :  }
                               :}
                               :  400a3c:	add    $0x28,%rsp
                               :  400a40:	pop    %rbx
                               :  400a41:	pop    %rbp
                               :  400a42:	retq   
